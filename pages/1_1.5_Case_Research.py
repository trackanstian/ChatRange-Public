import streamlit as st
import time
import logging
from chatrange.helpers import dprint, conversation, format_string, nav_to
from chatrange.logger import Logger
import json
from chatrange.redis import get_redis_client
import uuid
import pandas as pd
import tiktoken
from chatrange.crewai.master.main import CaseStudiesCrew, CaseResearchCrew


import requests
import html2text

from chatrange.open_ai import OpenAIClient, OpenAIMessages

#If the UUID is not set then go to the Start
if 'main' not in st.session_state:
    nav_to("/1.0_Scenario", st)

#Start Redis
redis_client = get_redis_client()

def is_valid_json(json_string):
    try:
        json_object = json.loads(json_string)
        return True
    except json.JSONDecodeError:
        dprint(message="The string is not a valid JSON.", level=logging.ERROR)
        dprint(message=json_string, level=logging.DEBUG)
        dprint(message=str(json.JSONDecodeError), level=logging.DEBUG)
        return False

def create_objective(objectives: list):
    output = ""
    for objective in objectives:
        if output == "":
            output = objective
        else:
            output= output + f"""
{objective}"""
    return output




# Streamlit page layout
st.set_page_config(page_title='ChatRange', layout='wide')

st.write(f"Session ID: {st.session_state['session']}")

# Create a header section with the background image
st.markdown('<div class="header"></div>', unsafe_allow_html=True)

st.title('Research Cases')

# Create the column
col, buff, col2 = st.columns([2,1,2])


col.markdown(
    """
   Case research is generated by using Autonomous AI Agents.
    """
    )

col.markdown(
    f"""
    Click the button bellow to begin research.
    """
    )

col.markdown("---")

if col.button('Research Case studies'):
    with st.spinner('Researching...'):
        st.session_state['cases']['research'] = ""

        file_path = f"GenDat/crewai/{st.session_state['session']}/threat_intel_01.incident_type.md"
        try:
            with open(file_path, 'r') as file:
                file_contents = file.read()

                custom_crew = CaseStudiesCrew(
                    incident_type=file_contents,
                    uuid=st.session_state['session']
                )

            data = custom_crew.run()

            dprint(message=data['stats'], level=logging.DEBUG)

            # Tiktoken - Static cost
            st.session_state['main']['tokens_out'] += data['stats']['completion_tokens']
            st.session_state['main']['cost_out'] += data['stats']['completion_tokens'] * 0.00003

            st.session_state['main']['tokens_in'] += data['stats']['prompt_tokens']
            st.session_state['main']['cost_in'] += data['stats']['prompt_tokens'] * 0.00001

            st.session_state['cases']['research']  = data['result']

        except FileNotFoundError:
            print(f"File '{file_path}' not found.")
        except IOError:
            print(f"Could not read from file '{file_path}'.")

if col.button('Create Case research'):
    with st.spinner('Researching... This may take a while.'):
        st.session_state['cases']['details'] = []

        file_path = f"GenDat/crewai/{st.session_state['session']}/case_studies_03.real_world_examples.json"
        try:
            with open(file_path, 'r') as file:
                examples = json.load(file)

                count = 0
                for example in examples:
                    if count < 5:
                        custom_crew = CaseResearchCrew(
                            case=example,
                            case_id=count,
                            uuid=st.session_state['session']
                        )
                        data = custom_crew.run()

                        dprint(message=data['stats'], level=logging.DEBUG)

                        # Tiktoken - Static cost
                        st.session_state['main']['tokens_out'] += data['stats']['completion_tokens']
                        st.session_state['main']['cost_out'] += data['stats']['completion_tokens'] * 0.00003

                        st.session_state['main']['tokens_in'] += data['stats']['prompt_tokens']
                        st.session_state['main']['cost_in'] += data['stats']['prompt_tokens'] * 0.00001

                        st.session_state['cases']['details'].append(data['result']) 
                    count += 1

        except FileNotFoundError:
            print(f"File '{file_path}' not found.")
        except IOError:
            print(f"Could not read from file '{file_path}'.")
  
 
col.markdown("---")

if col.button('Reset Case Studies'):
    st.session_state['cases']['research'] = ""
    col.write("Completed")

if col.button('Reset Case Research'):
    st.session_state['cases']['details'] = []
    col.write("Completed")

# Save to Redis
redis_client.set(f"{str(st.session_state['session'])}_cases", str(json.dumps(st.session_state['cases'])))

redis_client.close()

col2.header("Result")

def live_update_settings(status_placeholder):
        status_placeholder.write(json.dumps(st.session_state['cases']['research'], indent=2))
        status_placeholder.markdown("---")

        for case in st.session_state['cases']['details']:
            status_placeholder.markdown(case)
            status_placeholder.markdown("---")

live_update_settings(col2)


