import streamlit as st
import time
import logging
from chatrange.helpers import dprint, conversation, format_string, nav_to
from chatrange.logger import Logger
import json
from chatrange.redis import get_redis_client
import uuid
import pandas as pd
from chatrange.crewai.master.main import CyberExerciseCrew
import os

#Custom tiktoken - which supports GPT-4o
import tiktoken



import requests
import html2text

from chatrange.open_ai import OpenAIClient, OpenAIMessages

#If the UUID is not set then go to the Start
if 'main' not in st.session_state:
    nav_to("/1.0_Scenario", st)

#Start Redis
redis_client = get_redis_client()

def is_valid_json(json_string):
    try:
        json_object = json.loads(json_string)
        return True
    except json.JSONDecodeError:
        dprint(message="The string is not a valid JSON.", level=logging.ERROR)
        dprint(message=json_string, level=logging.DEBUG)
        dprint(message=str(json.JSONDecodeError), level=logging.DEBUG)
        return False

def create_objective(objectives: list):
    output = ""
    for objective in objectives:
        if output == "":
            output = objective
        else:
            output= output + f"""
{objective}"""
    return output

def create_folder(path: str):
    """
    Create a folder at the specified path if it doesn't already exist.

    Args:
        path (str): The path where the folder should be created.

    Returns:
        None
    """
    path = f"{os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)), '..'))}/{path}/{st.session_state['session']}"
    if not os.path.exists(path):
        os.makedirs(path)




# Streamlit page layout
st.set_page_config(page_title='ChatRange', layout='wide')

st.write(f"Session ID: {st.session_state['session']}")

# Create a header section with the background image
st.markdown('<div class="header"></div>', unsafe_allow_html=True)

st.title('Exercise Enhancement')

# Create the column
col, buff, col2 = st.columns([2,1,2])


col.markdown(
    """
    Threat intel is generated by using Autonomous AI Agents. This crew will research potention threat actors and provide a summary of the findings.
    """
    )

col.markdown(
    f"""
    Click the button bellow to begin research.
    """
    )

col.markdown("---")

create_folder("GenDat/crewai")

if col.button('Research Threat actor'):
    with st.spinner('Researching...'):
        st.session_state['threat_intel'] = {"research": ""}

        custom_crew = CyberExerciseCrew(
            uuid=st.session_state['session'],
            objectives=st.session_state['exercise_objectives']['objectives'],
            target=st.session_state['main']['participants'],
            scenario=st.session_state['main']['scenario']
        )
        data = custom_crew.run()

        dprint(message=data['stats'], level=logging.DEBUG)

        # Tiktoken - Static cost
        st.session_state['main']['tokens_out'] += data['stats']['completion_tokens']
        st.session_state['main']['cost_out'] += data['stats']['completion_tokens'] * 0.00003

        st.session_state['main']['tokens_in'] += data['stats']['prompt_tokens']
        st.session_state['main']['cost_in'] += data['stats']['prompt_tokens'] * 0.00001

        st.session_state['threat_intel']['research'] = data['result']


if col.button('Reset Threat actor'):
    st.session_state['threat_intel'] = {"research": ""}
    col.write("Completed")

# Save to Redis
redis_client.set(f"{str(st.session_state['session'])}_threat_intel", str(json.dumps(st.session_state['threat_intel'])))

redis_client.close()

col2.header("Result")

def live_update_settings(status_placeholder):
        status_placeholder.markdown(st.session_state['threat_intel']['research'])

live_update_settings(col2)


